Prediction of Usage of Bay Area Bike Share System
========================================================
author: SakaiAtMidnight2.0
date: 
autosize: true


Outline
========================================================

- Data Introduction
- Exploratory Data Analaysis
- Model I: Gaussian Process
- Model II: Thin Plate Splines

Introduction to Data
========================================================

Station(70 records)  
- station ID, name, latitude, longitude, dockcount, city, installation date

Trip(approx. 354,000 records of individual trips)  
- trip ID, duration, start date, start station, start terminal, end date, end station, end terminal, bike, subscription type, zip code  

Exploratory Data Analaysis
========================================================
```{r load packages, echo = F}
library(data.table)
library(fields)
library(dplyr)
library(lubridate)
library(raster)
library(stringr)
library(sf)
library(geoR)
library(spBayes)
library(ggplot2)
library(chron)
library(gridExtra)
```

```{r data preparation, echo=FALSE, cache=TRUE}
trip <- fread("babs_open_data_year_2/201508_trip_data.csv")
station <- fread("babs_open_data_year_2/201508_station_data.csv")

df = trip %>%
  mutate(date = floor_date(mdy_hm(`Start Date`),'day')) %>%
  mutate(hour_of_day = hour(mdy_hm(`Start Date`))) %>%
  group_by(`Start Terminal`, date, hour_of_day) %>%
  summarise(`Number of Trips` = n())

agg = merge(df, station, by.x = 'Start Terminal', by.y = 'station_id') %>% mutate(day_of_week = wday(date))

agg_day = agg %>% 
  group_by(`Start Terminal`,date, day_of_week, lat, long) %>%
  summarise(total = sum(`Number of Trips`)) %>%
  group_by(`Start Terminal`, day_of_week, lat, long) %>%
  summarise(avg = mean(total))

agg_hour = agg %>%
  group_by(`Start Terminal`, hour_of_day, lat, long) %>% 
  summarise(avg = mean(`Number of Trips`))

agg_year = agg %>%
  group_by(`Start Terminal`, lat, long) %>% 
  summarise(avg = sum(`Number of Trips`))
```

```{r get coordinates for prediction, echo=FALSE, cache=TRUE}
counties <- map_data("county")
ca_county <- subset(counties, region == "california")
bay_name <- c("san francisco", "san mateo","santa clara")
bay_county <- subset(ca_county,subregion %in% bay_name)

sf <- subset(ca_county,subregion %in% "san francisco") %>% dplyr::select(long, lat) %>% as.matrix()
sm <- subset(ca_county,subregion %in% "san mateo") %>% dplyr::select(long, lat) %>% as.matrix()
sc <- subset(ca_county,subregion %in% "santa clara") %>% dplyr::select(long, lat) %>% as.matrix()

sf_poly <- st_polygon(list(sf))
sf_sample <- st_sample(sf_poly,100)
sm_poly <- st_polygon(list(sm))
sm_sample <- st_sample(sm_poly,1000)
sc_poly <- st_polygon(list(sc))
sc_sample <- st_sample(sc_poly,3000)

r = raster(nrows=30, ncol=60, xmn = min(bay_county$long), xmx = max(bay_county$long),ymn = min(bay_county$lat), ymx = max(bay_county$lat))

sf_points <- rbind(matrix(unlist(sf_sample),ncol = 2, byrow = TRUE), matrix(unlist(sf_poly),ncol = 2, byrow = TRUE))
sm_points <- rbind(matrix(unlist(sm_sample),ncol = 2, byrow = TRUE), matrix(unlist(sm_poly),ncol = 2, byrow = TRUE))
sc_points <- rbind(matrix(unlist(sc_sample),ncol = 2, byrow = TRUE), matrix(unlist(sc_poly),ncol = 2, byrow = TRUE))
bay_points <- rasterize(rbind(sf_points,sm_points,sc_points),r)
cells = which(!is.na(bay_points[]))
pred_coords = xyFromCell(r, cells)

```

```{r, echo=FALSE, cache=TRUE}
post_summary = function(m, ci_width=0.95)
{
  d = data_frame(
    post_mean  = apply(m, 2, mean),
    post_med   = apply(m, 2, median),
    post_lower = apply(m, 2, quantile, probs=(1-ci_width)/2),
    post_upper = apply(m, 2, quantile, probs=1 - (1-ci_width)/2)
  )
  
  if (!is.null(colnames(m)))
    d = d %>% mutate(param = colnames(m)) %>% select(param,post_mean:post_upper)
  
  d
}
```

```{r, echo=FALSE, fig.width=30, fig.height=15}
g1 = ggplot(bay_county)+geom_polygon(aes(long,lat,group = group, fill = subregion)) +
  theme(legend.title = element_text(size=18),legend.text=element_text(size=12))
g2 = ggplot(agg_year, aes(long,lat)) + stat_bin_2d(bins = 50) + 
  xlim(min(bay_county$long), max(bay_county$long)) +
  ylim(min(bay_county$lat), max(bay_county$lat)) +
  scale_fill_gradientn(colours = rev(terrain.colors(6))) +
  theme(legend.title = element_text(size=18),legend.text=element_text(size=12))
g3 = ggplot() + geom_point(data = agg_year, aes(long,lat,colour = avg),size=5) + 
  xlim(min(bay_county$long), max(bay_county$long)) +
  ylim(min(bay_county$lat), max(bay_county$lat)) +
  labs(color='total') +
  scale_colour_gradientn(colours = rev(terrain.colors(6)))+
  theme(legend.title = element_text(size=18),legend.text=element_text(size=12))

grid.arrange(g1,g2,g3, ncol = 3)
```

Model I: Gaussian Process
========================================================
```{r, eval=FALSE}
coords = agg[,c('long','lat')] %>% as.matrix()
m = spLM(avg ~ 1, data = hour, coords = coords, starting = starting, priors = priors, 
         cov.model = "exponential", n.samples = n_samp, tuning = tuning,
         n.report = n_samp/2)
m_pred = spPredict(m, pred_coords, pred.covars = matrix(1, nrow=nrow(pred_coords)), 
                   start=n_samp/2+1, thin=(n_samp/2)/1000)
m_pred_summary = post_summary(t(m_pred$p.y.predictive.samples))

splm_pred = r
splm_pred[cells] = m_pred_summary$post_mean
```

Model II: Thin Plate Splines(TPS)
========================================================
```{r, eval=FALSE}
coords = agg[,c('long','lat')] %>% as.matrix()
tps = Tps(x = coords, Y=agg$avg)
trip_pred = r
trip_pred[cells] = predict(tps, pred_coords)
```

Overall 
=============================
```{r, echo=FALSE, message = FALSE, warning=FALSE, fig.width=18, fig.height=10, cache=TRUE}
par(mfrow = c(1,2), oma=c(4,4,4,4), mar=c(2,4,2,4))
log = capture.output({
   coords = agg_year[,c('long','lat')] %>% as.matrix()
     d = dist(coords) %>% as.matrix()
   # variog(coords = coords, data = day$avg, messages = FALSE, uvec = seq(0, max(d)/4, length.out=50)) %>% plot()
   max_range = max(dist(coords)) / 4
   n_samp = 20000
   starting = list(phi = 3/0.025, sigma.sq = 3e7, tau.sq = 1e7)
   tuning = list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
   priors = list(
     beta.Norm = list(0, 1000), 
     phi.Unif = c(3/max_range,200), 
     sigma.sq.IG = c(2, 2e7), 
     tau.sq.IG = c(2, 2e7)
   )
  m = spLM(avg ~ 1, data = agg_year, coords = coords, starting = starting, priors = priors, 
          cov.model = "exponential", n.samples = n_samp, tuning = tuning,
          n.report = n_samp/2)
 
 m_pred = spPredict(m, pred_coords, pred.covars = matrix(1, nrow=nrow(pred_coords)), 
                    start=n_samp/2+1, thin=(n_samp/2)/1000)
 m_pred_summary = post_summary(t(m_pred$p.y.predictive.samples))
 
 splm_pred = r
 splm_pred[cells] = m_pred_summary$post_mean
     #tps
     tps = Tps(x = coords, Y=agg_year$avg)
     trip_pred = r
     pred <- predict(tps, pred_coords)
     pred[pred<0] <- 0
     trip_pred[cells] = pred
 })
     plot(splm_pred, main='GP')
     points(coords, pch=16, cex=0.5)
     plot(trip_pred,cex = 0.8, main='TPS')
     points(coords, pch=16, cex=0.5)
```

Day of Week (GP)
====================================================
```{r, echo=FALSE, message = FALSE, warning=FALSE, fig.width=20, fig.height=10, cache=TRUE}
#model for dow
par(mfrow = c(2,4), oma=c(4,4,4,4), mar=c(2,4,2,4))
for(i in c(2:6,7,1)){
  log = capture.output({
  day = filter(agg_day, day_of_week==i)
  coords = day[,c('long', 'lat')] %>% as.matrix()
  d = dist(coords) %>% as.matrix()
  # variog(coords = coords, data = day$avg, messages = FALSE, uvec = seq(0, max(d)/4, length.out=50)) %>% plot()
  max_range = max(dist(coords)) / 4
  n_samp = 20000
  starting = list(phi = 3/0.025, sigma.sq = 300, tau.sq = 100)
  tuning = list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
  priors = list(
    beta.Norm = list(0, 1000), 
    phi.Unif = c(3/max_range,200), 
    sigma.sq.IG = c(2, 200), 
    tau.sq.IG = c(2, 200)
  )
  m = spLM(avg ~ 1, data = day, coords = coords, starting = starting, priors = priors, 
         cov.model = "exponential", n.samples = n_samp, tuning = tuning,
         n.report = n_samp/2)

m_pred = spPredict(m, pred_coords, pred.covars = matrix(1, nrow=nrow(pred_coords)), 
                   start=n_samp/2+1, thin=(n_samp/2)/1000)
m_pred_summary = post_summary(t(m_pred$p.y.predictive.samples))

splm_pred = r
splm_pred[cells] = m_pred_summary$post_mean
})
plot(splm_pred, main = weekdays(i+2))
points(coords, pch=16, cex=0.5)
}
```

Day of Week (TPS)
==============================
```{r, echo=FALSE, message = FALSE, warning=FALSE, fig.width=20, fig.height=10, cache=TRUE}
#model for dow
par(mfrow = c(2,4), oma=c(4,4,4,4), mar=c(2,4,2,4))
for(i in c(2:6,7,1)){
    log = capture.output({
    day = filter(agg_day, day_of_week==i)
    coords = day[,c('long','lat')] %>% as.matrix()
    tps = Tps(x = coords, Y=day$avg)
    trip_pred = r
    pred <- predict(tps, pred_coords)
    pred[pred<0] <- 0
    trip_pred[cells] = pred
    })
    plot(trip_pred,cex = 0.8, main = weekdays(i+2))
    points(coords, pch=16, cex=0.5)
}
```

Hour of Day
=============================
```{r, echo=FALSE, message = FALSE, warning=FALSE, fig.width=18, fig.height=5, cache=TRUE}
par(mfrow = c(1,3), oma=c(4,4,4,4), mar=c(2,4,2,4))
for (i in c(9,13,21)){
  log = capture.output({
  hour = filter(agg_hour, hour_of_day==i)
  coords = hour[,c('long', 'lat')] %>% as.matrix()
  d = dist(coords) %>% as.matrix()
  # variog(coords = coords, data = hour$avg, messages = FALSE, uvec = seq(0, max(d)/4, length.out=50)) %>% plot()
  max_range = max(dist(coords)) / 4
  n_samp = 20000
  starting = list(phi = 3/0.025, sigma.sq = 33, tau.sq = 17)
  tuning = list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
  priors = list(
    beta.Norm = list(0, 1000), 
    phi.Unif = c(3/max_range, 200), 
    sigma.sq.IG = c(2, 2), 
    tau.sq.IG = c(2, 2)
  )
  m = spLM(avg ~ 1, data = hour, coords = coords, starting = starting, priors = priors, 
         cov.model = "exponential", n.samples = n_samp, tuning = tuning,
         n.report = n_samp/2)

m_pred = spPredict(m, pred_coords, pred.covars = matrix(1, nrow=nrow(pred_coords)), 
                   start=n_samp/2+1, thin=(n_samp/2)/1000)
m_pred_summary = post_summary(t(m_pred$p.y.predictive.samples))

splm_pred = r
splm_pred[cells] = m_pred_summary$post_mean
})
  plot(splm_pred, main=paste0(i, ":00"))
  points(coords, pch=16, cex=0.5)
}
title(main=list("GP", cex=2), outer=TRUE)
par(mfrow = c(1,3), oma=c(4,4,4,4), mar=c(2,4,2,4))
for (i in c(9,13,21)){
  agg1 = agg_hour %>% filter(hour_of_day==i)
  coords = agg1[,c('long','lat')] %>% as.matrix()
  tps = Tps(x = coords, Y=agg1$avg)
  trip_pred = r
  pred <- predict(tps, pred_coords)
  pred[pred<0] <- 0
  trip_pred[cells] = pred
  plot(trip_pred,cex = 0.8, main=paste0(i,":00"))
  points(unique(coords), pch=16, cex=0.5)
}
title(main=list("TPS", cex=2), outer=TRUE)
```




