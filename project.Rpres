Prediction of Usage of Bay Area Bike Share System
========================================================
author: SakaiAtMidnight2.0
date: 
autosize: true

Outline
========================================================

- Data Introduction
- Exploratory Data Analaysis
- Model I: Thin Plate Splines
- Model II: Gaussian Process

Introduction to Data
========================================================

Exploratory Data Analaysis
========================================================
```{r, echo = F}
library(data.table)
library(fields)
library(dplyr)
library(lubridate)
library(raster)
library(stringr)
library(ggplot2)
library(sf)
library(fields)
library(geoR)
library(spBayes)

trip <- fread("babs_open_data_year_2/201508_trip_data.csv")
station <- fread("babs_open_data_year_2/201508_station_data.csv")
df = trip %>%
  mutate(date = floor_date(mdy_hm(`Start Date`),'day')) %>%
  mutate(hour_of_day = hour(mdy_hm(`Start Date`))) %>%
  group_by(`Start Terminal`, date, hour_of_day) %>%
  summarise(`Number of Trips` = n())

# df = trip %>% 
#   mutate(date = floor_date(mdy_hm(`Start Date`),'day')) %>%
#   mutate(hour_of_day = hour(mdy_hm(`Start Date`))) %>%
#   group_by(`End Terminal`, date, hour_of_day) %>%
#   summarise(`Number of Trips` = n())

agg = merge(df, station, by.x = 'Start Terminal', by.y = 'station_id') %>% mutate(day_of_week = wday(date))

agg2 = agg %>% group_by(`Start Terminal`, day_of_week, hour_of_day, lat, long) %>% summarise(avg = mean(`Number of Trips`))

agg7_15 = agg2 %>% filter(day_of_week==2 & hour_of_day==10)

agg3 = agg %>% group_by(`Start Terminal`, lat, long) %>% summarise(avg = mean(`Number of Trips`))

counties <- map_data("county")
ca_county <- subset(counties, region == "california")
bay_name <- c("san francisco", "san mateo","santa clara")
bay_county <- subset(ca_county,subregion %in% bay_name)

ggplot(bay_county)+geom_polygon(aes(long,lat,group = group, fill = subregion))
ggplot(agg3, aes(long,lat)) + stat_bin_2d(bins = 50) + 
  xlim(min(bay_county$long), max(bay_county$long))

```




Model I: Thin Plate Splines(TPS)
========================================================

```{r, echo = FALSE}

sf <- subset(ca_county,subregion %in% "san francisco") %>% dplyr::select(long, lat) %>% as.matrix()
sm <- subset(ca_county,subregion %in% "san mateo") %>% dplyr::select(long, lat) %>% as.matrix()
sc <- subset(ca_county,subregion %in% "santa clara") %>% dplyr::select(long, lat) %>% as.matrix()

sf_poly <- st_polygon(list(sf))
sf_sample <- st_sample(sf_poly,100)
sm_poly <- st_polygon(list(sm))
sm_sample <- st_sample(sm_poly,1000)
sc_poly <- st_polygon(list(sc))
sc_sample <- st_sample(sc_poly,3000)

r = raster(nrows=30, ncol=60, xmn = min(bay_county$long), xmx = max(bay_county$long),ymn = min(bay_county$lat), ymx = max(bay_county$lat))

sf_points <- rbind(matrix(unlist(sf_sample),ncol = 2, byrow = TRUE), matrix(unlist(sf_poly),ncol = 2, byrow = TRUE))
sm_points <- rbind(matrix(unlist(sm_sample),ncol = 2, byrow = TRUE), matrix(unlist(sm_poly),ncol = 2, byrow = TRUE))
sc_points <- rbind(matrix(unlist(sc_sample),ncol = 2, byrow = TRUE), matrix(unlist(sc_poly),ncol = 2, byrow = TRUE))
bay_points <- rasterize(rbind(sf_points,sm_points,sc_points),r)
cells = which(!is.na(bay_points[]))
pred_coords = xyFromCell(r, cells)

coords = agg3[,c('long','lat')] %>% as.matrix()
tps = Tps(x = coords, Y=agg3$avg)
trip_pred = r
trip_pred[cells] = predict(tps, pred_coords)


```

Result of TPS
========================================================

```{r, echo=FALSE}
plot(trip_pred,cex = 0.8, main = "Average number of trips start")
points(unique(coords), pch=16, cex=0.5)
```


Model II: Gaussian Process
========================================================
```{r,echo=FALSE}
dow = merge(df, station, by.x = 'Start Terminal', by.y = 'station_id') %>%
  mutate(day_of_week = wday(date))  %>%
  group_by(`Start Terminal`, day_of_week, lat, long) %>% 
  summarise(avg = mean(`Number of Trips`))


df2 = trip %>% 
  mutate(date = floor_date(mdy_hm(`Start Date`),'day')) %>%
  mutate(hour_of_day = hour(mdy_hm(`Start Date`))) %>%
  group_by(`Start Terminal`, date, hour_of_day) %>%
  summarise(`Number of Trips` = n())

hod = merge(df2, station, by.x = 'Start Terminal', by.y = 'station_id') %>%
  mutate(day_of_week = wday(date))  %>%
  group_by(`Start Terminal`, day_of_week, hour_of_day, lat, long) %>% 
  summarise(avg = mean(`Number of Trips`))

overall = merge(df, station, by.x = 'Start Terminal', by.y = 'station_id') %>%
  group_by(`Start Terminal`, lat, long) %>% 
  summarise(total = sum(`Number of Trips`))

post_summary = function(m, ci_width=0.95)
{
  d = data_frame(
    post_mean  = apply(m, 2, mean),
    post_med   = apply(m, 2, median),
    post_lower = apply(m, 2, quantile, probs=(1-ci_width)/2),
    post_upper = apply(m, 2, quantile, probs=1 - (1-ci_width)/2)
  )
  
  if (!is.null(colnames(m)))
    d = d %>% mutate(param = colnames(m)) %>% select(param,post_mean:post_upper)
  
  d
}

```

Result of GPs
========================================================
```{r, echo=FALSE, message = FALSE, warning=FALSE}
log = capture.output({
#model for overall
coords = overall[,c('long', 'lat')] %>% as.matrix()
d = dist(coords) %>% as.matrix()
# variog(coords = coords, data = overall$total, messages = FALSE, uvec = seq(0, max(d)/4, length.out=50)) %>% plot()

max_range = max(dist(coords)) / 4
n_samp = 20000
starting = list(phi = 3/0.025, sigma.sq = 3e7, tau.sq = 1e7)
tuning = list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
priors = list(
  beta.Norm = list(0, 1000), 
  phi.Unif = c(3/max_range,200), 
  sigma.sq.IG = c(2, 2e7), 
  tau.sq.IG = c(2, 2e7)
)
m = spLM(total ~ 1, data = overall, coords = coords, starting = starting, priors = priors, 
         cov.model = "exponential", n.samples = n_samp, tuning = tuning,
         n.report = n_samp/2)
m_pred = spPredict(m, pred_coords, pred.covars = matrix(1, nrow=nrow(pred_coords)), 
                   start=n_samp/2+1, thin=(n_samp/2)/1000)
m_pred_summary = post_summary(t(m_pred$p.y.predictive.samples))

splm_pred = r
splm_pred[cells] = m_pred_summary$post_mean

})
plot(splm_pred)
points(coords, pch=16, cex=0.5)
```


Day of Week
====================================================
```{r, echo=FALSE, message = FALSE, warning=FALSE, fig.width=14}
#model for dow
par(mfrow = c(2,7))
for(i in 1:7){
  log = capture.output({
  day = filter(dow, day_of_week==i)
  coords = day[,c('long', 'lat')] %>% as.matrix()
  d = dist(coords) %>% as.matrix()
  # variog(coords = coords, data = day$avg, messages = FALSE, uvec = seq(0, max(d)/4, length.out=50)) %>% plot()
  max_range = max(dist(coords)) / 4
  n_samp = 20000
  starting = list(phi = 3/0.025, sigma.sq = 300, tau.sq = 100)
  tuning = list("phi"=0.1, "sigma.sq"=0.1, "tau.sq"=0.1)
  priors = list(
    beta.Norm = list(0, 1000), 
    phi.Unif = c(3/max_range,200), 
    sigma.sq.IG = c(2, 200), 
    tau.sq.IG = c(2, 200)
  )
  m = spLM(avg ~ 1, data = day, coords = coords, starting = starting, priors = priors, 
         cov.model = "exponential", n.samples = n_samp, tuning = tuning,
         n.report = n_samp/2)

m_pred = spPredict(m, pred_coords, pred.covars = matrix(1, nrow=nrow(pred_coords)), 
                   start=n_samp/2+1, thin=(n_samp/2)/1000)
m_pred_summary = post_summary(t(m_pred$p.y.predictive.samples))

splm_pred = r
splm_pred[cells] = m_pred_summary$post_mean})
plot(splm_pred)
points(coords, pch=16, cex=0.5)
}
```

